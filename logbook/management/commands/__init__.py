from django.core.management.base import BaseCommand
from django.utils.timezone import now
from datetime import timedelta

from logbook.models import LineServiceHistory
from notifications.models import Notification
from users.models import User

class Command(BaseCommand):
    help = 'Check for upcoming returns, overdue returns, and block users with long overdue books'

    def handle(self, *args, **options):
        today = now().date()

        loans = LineServiceHistory.objects.filter(status='active')

        for loan in loans:
            user = loan.service_history.reader
            due_date = loan.date_when_should_return
            days_until_due = (due_date - today).days
            days_overdue = (today - due_date).days

            # üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ 2 –¥–Ω—ñ –¥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            if days_until_due == 2:
                self._create_notification(
                    user,
                    f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –∫–Ω–∏–≥—É '{loan.book.name}' –¥–æ {due_date}"
                )

            # ‚ùó –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫—É
            if days_overdue == 1:
                self._create_notification(
                    user,
                    f"–ü—Ä–æ—Å—Ç—Ä–æ—á–∫–∞: –∫–Ω–∏–≥–∞ '{loan.book.name}' –º–∞–ª–∞ –±—É—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∞ {due_date}"
                )

            # üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –ø—ñ—Å–ª—è 7 –¥–Ω—ñ–≤
            if days_overdue == 7:
                self._create_notification(
                    user,
                    f"–ê–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫—É –∫–Ω–∏–≥–∏ '{loan.book.name}' –Ω–∞ 7 –¥–Ω—ñ–≤"
                )
                user.is_active = False
                user.save()

        self.stdout.write(self.style.SUCCESS('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))

    def _create_notification(self, user, message):
        Notification.objects.create(
            user=user,
            message=message
        )
